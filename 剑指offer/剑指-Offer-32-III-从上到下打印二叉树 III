/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//1
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null)
        {
            return new ArrayList<List<Integer>>();
        }
        LinkedList<TreeNode> stack1 = new LinkedList<TreeNode>();
        LinkedList<TreeNode> stack2 = new LinkedList<TreeNode>();
        // LinkedList<Integer> deliver;
        TreeNode node;
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> mid = new ArrayList<Integer>();
        int judge = 0;
        stack1.push(root);
        while(!stack1.isEmpty()||!stack2.isEmpty())
        {
            if(judge==0)
            {
                // deliver =stack1;
                node = stack1.pop();
                mid.add(node.val);
                if(node.left!=null)
                {
                    stack2.push(node.left);
                }
                if(node.right!=null)
                {
                    stack2.push(node.right);
                }
                if(stack1.isEmpty())
                {
                    result.add(mid);
                    mid = new ArrayList<Integer>();
                    judge = 1;
                }
            }
            else if(judge==1)
            {
                node = stack2.pop();
                mid.add(node.val);
                if(node.right!=null)
                {
                    stack1.push(node.right);
                }
                if(node.left!=null)
                {
                    stack1.push(node.left);
                }
                if(stack2.isEmpty())
                {
                    result.add(mid);
                    mid = new ArrayList<Integer>();
                    judge = 0;
                }
            }
        }
        return result;
    }
}


//2
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root==null)
        {
            return new ArrayList<List<Integer>>();
        }
        LinkedList<TreeNode> que = new LinkedList<TreeNode>();
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        List<Integer> mid = new ArrayList<Integer>();
        LinkedList<Integer> stack = new LinkedList<Integer>();
        TreeNode deliver = new TreeNode();
        int direction=1;//1->||0<-
        int now =1;
        int nextlevel=0;
        que.offer(root);
        while(!que.isEmpty())
        {
            if(now==0)
            {
                if(direction==0)
                {
                    stack.clear();
                    for(Integer num:mid)
                    {
                        stack.push(num);
                    }
                    mid.clear();
                    while(!stack.isEmpty())
                    {
                        mid.add(stack.pop());
                    }
                    direction=1;
                }
                else if(direction==1)
                {
                    direction=0;
                }
                result.add(mid);
                mid = new ArrayList<Integer>();
                now = nextlevel;
                nextlevel = 0;
            }
            deliver= que.poll();
            mid.add(deliver.val);
            if(deliver.left!=null)
            {
                que.add(deliver.left);
                nextlevel++;
            }
            if(deliver.right!=null)
            {
                que.add(deliver.right);
                nextlevel++;
            }
            now--;
        }

        
                if(direction==0)
                {
                    stack.clear();
                    for(Integer num:mid)
                    {
                        stack.push(num);
                    }
                    mid.clear();
                    while(!stack.isEmpty())
                    {
                        mid.add(stack.pop());
                    }
                    direction=1;
                }
                else if(direction==1)
                {
                    direction=0;
                }
                result.add(mid);
        return result;
    }
}


